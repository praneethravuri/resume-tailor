This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: .env
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
main.py
prompt_engineering.py
template.py

================================================================
Files
================================================================

================
File: .gitignore
================
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

*.html
*.json
*.txt

================
File: main.py
================
# main.py

import os
import json
from openai import OpenAI
from dotenv import load_dotenv
from prompt_engineering import get_system_prompt
from template import html_template

load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai_client = OpenAI(api_key=OPENAI_API_KEY)
model_name = "gpt-4o"  # or your chosen model
temperature = 0.7
max_tokens = 2000  # Increase if necessary for complete output

def call_openai_api(prompt):
    messages = [
        {"role": "system", "content": get_system_prompt(job_description, resume, action_verbs)},
        {"role": "user", "content": prompt}
    ]
    try:
        response = openai_client.chat.completions.create(
            model=model_name,
            messages=messages,
            temperature=temperature,
            max_tokens=max_tokens
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print("Error calling OpenAI API:", e)
        return ""

# Load resume data from JSON file
with open("resume.json", "r") as f:
    resume = json.load(f)
    
with open("action_verbs.json", "r") as f:
    action_verbs = json.load(f)

# Load job description from file
with open("job_description.txt", "r") as f:
    job_description = f.read().strip()

# Build the combined prompt.
combined_prompt = f"""
Job Description:
{job_description}

My resume:
{json.dumps(resume, indent=2)}

Action Verbs:
{json.dumps(action_verbs, indent=2)}
"""

print(combined_prompt)

# Call the API once with the combined prompt
final_output = call_openai_api(combined_prompt)

# Replace placeholders in the HTML template with the LLM's output
final_html = html_template.replace("<!-- Resume Content -->", final_output)

# Write the final tailored resume HTML to a file
with open("tailored_resume.html", "w") as f:
    f.write(final_html)

# Optionally, convert the HTML to PDF
# converter.convert(final_html, "tailored_resume.pdf")

================
File: prompt_engineering.py
================
# prompt_engineering.py
import json

def get_system_prompt(job_description, resume, action_verbs):
    return f"""
You are a smart assistant to career advisors at the Harvard Extension School. Your task is to rewrite resume sections to be concise, truthful, and convincingâ€”ensuring that the final resume fits on a single page.

Guidelines:
- Be truthful and objective to the provided experience.
- Rewrite job highlight items using STAR methodology (without mentioning STAR explicitly).
- Correct any spelling and grammar errors.
- Write in an expressive, direct, and active voice.
- Do not add any details that are not present in the provided resume information.
- If the job description mentions aspects that the candidate does not have experience with, omit those details.
- The final resume must fit on one page but should fill the entire page.
- Only return the content that is requested.
- Avoid buzzwords, filler words, and repetition.
- Use &ndash; for dates
- Do not include the additional instructions in the output
- Do not change pronouns such as the institute names, company names, project names, and other personal details.
- Do not put the output in a code block. The final output should be html plain text
- 

Identify the keywords in the job description and use them to tailor the resume sections. Rewrite each bullet point tailored to the job description. Ensure that the resume is tailored to the job description and fits on one page. Use a unique action verb to start, describe the task, and conclude with the result, quantifying outcomes when applicable. Include relevant keywords from the job description only if they align with the candidate's actual experience. If the job description mentions aspects that are not reflected in the candidate's background, do not include them. Do not create details that are not provided. Format each bullet point and other information according to that section's html structure. Here are the various sections, html structures, and additional instructions specific to that section.

Here is the job description:
{job_description}

Here is my resume:
{json.dumps(resume, indent=2)}

Here are the action verbs with their categories:
{json.dumps(action_verbs, indent=2)}

<!-- EDUCATION -->
<div class="section">
    <div class="section-title"><strong>Education</strong></div>
    <div class="sub-section test-section">
        <div class="sub-section-right">
            <h3> INSTITUTE-NAME </h3>
            <p> DEGREE-NAME </p>
            <p> COURSEWORK-LIST </p>
        </div>
        <div class="sub-section-left">
            <p> LOCATION </p>
            <p> START DATE & END DATE </p>
        </div>
    </div>
</div>

Additional Instructions: Identify which computer science and software engineering university courses can be inferred from the job description and list them separated by commas. Do not list more than 5 courses. Ensure that the list is concise and only includes courses relevant to the candidate's background.

<!-- EXPERIENCE -->
<div class="section">
    <div class="section-title"><strong>Experience</strong></div>
        <div class="exp-sub-section">
            <div class="sub-section">
                <div class="sub-section-right">
                    <h3> COMPANY-NAME </h3>
                    <p> POSITION/TITLE </p>
                </div>
                <div class="sub-section-left">
                    <p> LOCATION </p>
                    <p> DURATION </p>
                </div>
            </div>
            <div class="resume-points">
                <ul>
                    <li> BULLET POINT 1</li>
                    <li> BULLET POINT 2</li>
                    <!-- Up to 6 bullet points -->
                </ul>
            </div>
        </div>
        <!-- Additional experience entries -->

Additional Instructions: Limit the bullet points to 6 per experience entry.

<!-- SKILLS -->
<div class="section">
    <div class="section-title"><strong>Skills</strong></div>
    <div class="skills-container">
        <div class="skill-item-1">
            <span class="skill-label"> LABEL-1: </span>
            <span class="skill-content"> SKILLS </span>
        </div>
        <div class="skill-item">
            <span class="skill-label"> LABEL-2: </span>
            <span class="skill-content"> SKILLS </span>
        </div>
        <!-- Additional skill entries -->
    </div>
</div>

Additional Instructions: Present each skill entry with its corresponding label and content. If you find a skills that is relevant to my experience but not mentioned in my resume and relevant to the job description, you can add it. If you cannot categorize that skill in existing skills, you can create a new category. Ensure the formatting is proper and use full names or describe the labels clearly. Here are some examples of labels: Programming Languages, Frameworks, Tools, Technologies, Web Technologies, Databases, Machine Learning, DevOps and Cloud, etc.

<!-- PROJECTS -->
<div class="section">
    <div class="section-title"><strong>Projects</strong></div>
        <div class="projects-section">
            <h3> PROJECT-NAME </h3>
            <ul>
                <li> BULLET POINT 1</li>
                <li> BULLET POINT 2</li>
                <!-- Up to 4 bullet points -->
            </ul>
        </div>
        <!-- Additional project entries -->
</div>

Additional Instructions: Limit the bullet points to 4 per experience entry.
"""

================
File: template.py
================
# template.py

html_template = (
    """
    <!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>Praneeth Ravuri Resume</title>
    <style>
        /* Set up A4 paper dimensions with margins */
        @page {
            size: A4;
        }

        body {
            font-family: Arial, sans-serif;
            line-height: 1;
            color: #000000;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 1000px;
            margin: auto;
            padding: 20px;
        }

        .header,
        .footer {
            text-align: center;
        }

        .section-title {
            border-bottom: 1px solid #ccc;
            margin-top: 30px;
            margin-bottom: 10px;
            padding-bottom: 5px;
            font-size: 1.3em;
        }

        h1,
        h2,
        h3 {
            margin: 5px 0;
        }

        p {
            margin: 5px 0;
        }

        ul {
            list-style-type: disc;
            margin-left: 20px;
            padding-left: 0;
        }

        li {
            margin-bottom: 5px;
        }

        .sub-section {
            margin-bottom: 15px;
            display: flex;
            justify-content: space-between;
        }

        .sub-section-right {
            text-align: left;
        }

        .sub-section-left {
            text-align: right;
        }

        a {
            color: #0066cc;
            text-decoration: none;
        }

        a:hover {
            text-decoration: underline;
        }

        .skills-container {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .skill-item {
            display: flex;
        }

        .skill-label {
            flex: 0 0 120px;
            /* sets a fixed width for labels */
            font-weight: bold;
        }

        .skill-content {
            flex: 1;
        }
    </style>
</head>

<body>
    <page size="A4">
        <div class="container">

            <!-- Header -->
            <div class="header">
                <h1>Praneeth Ravuri</h1>
                <p>
                    571-622-8648 |
                    <a href="mailto:pravdevrav@gmail.com">pravdevrav@gmail.com</a> |
                    <a href="https://www.praneethravuri.com">praneethravuri.com</a> |
                    <a href="https://www.linkedin.com/in/prav25/">linkedin.com/prav25</a> |
                    <a href="https://www.github.com/praneethravuri">github.com/praneethravuri</a> |
                    Richardson, TX
                </p>
            </div>
                <!-- Resume Content -->
        </div>
    </page>
</body>

</html>
    """
)



================================================================
End of Codebase
================================================================
